import asyncio
import os
import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
import openai

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN or not OPENAI_KEY:
    raise ValueError("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY")

openai.api_key = OPENAI_KEY
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –õ–∏–º–∏—Ç—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
MAX_REQUESTS_PER_DAY = 20
user_limits = {}
user_state = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/—É—Ç–ø")],
        [KeyboardButton(text="/—Ü–∞")],
        [KeyboardButton(text="/–∫–æ–Ω—Ç–µ–Ω—Ç")],
        [KeyboardButton(text="/—Å–∫—Ä–∏–ø—Ç–ø—Ä–æ–¥–∞–∂")],
        [KeyboardButton(text="/–∫–µ–π—Å")],
        [KeyboardButton(text="/–ø—Ä–æ–¥–∂–µ–∫—Ç")],
        [KeyboardButton(text="/—á–∞—Ç-–±–æ—Ç")],
        [KeyboardButton(text="/—Ñ–∏–Ω–º–æ–¥–µ–ª—å")],
        [KeyboardButton(text="/—Å–æ–∑–¥–∞–Ω–∏–µ–ö–ü")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ —Ç–∞—Ä–≥–µ—Ç–æ–ª–æ–≥–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã–π @renafomicheva\n"
        "–ù–∞–ø–∏—à–∏ /–º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å üî•\n\n"
        "üìå –ù–µ –±–æ–ª–µ–µ 20 GPT-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        reply_markup=menu_keyboard
    )

@dp.message(Command("—É—Ç–ø"))
async def handle_utp(message: Message):
    user_state[message.from_user.id] = "—É—Ç–ø"
    await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∏—à—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å 10 –£–¢–ü.")

@dp.message(Command("—Ü–∞"))
async def handle_ca(message: Message):
    user_state[message.from_user.id] = "—Ü–∞"
    await message.answer("–£–∫–∞–∂–∏ –Ω–∏—à—É ‚Äî —è —Å–æ—Å—Ç–∞–≤–ª—é –∞–Ω–∞–ª–∏–∑ –¶–ê –∏ 3 –∞–≤–∞—Ç–∞—Ä–∞.")

@dp.message(Command("–∫–æ–Ω—Ç–µ–Ω—Ç"))
async def handle_content(message: Message):
    user_state[message.from_user.id] = "–∫–æ–Ω—Ç–µ–Ω—Ç"
    await message.answer("–£–∫–∞–∂–∏ –Ω–∏—à—É ‚Äî —è —Å–æ–∑–¥–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω + 15 –ø–æ—Å—Ç–æ–≤.")

@dp.message(Command("—Å–∫—Ä–∏–ø—Ç–ø—Ä–æ–¥–∞–∂"))
async def handle_script(message: Message):
    user_state[message.from_user.id] = "—Å–∫—Ä–∏–ø—Ç"
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî —è –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å –µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ.")

@dp.message(Command("–∫–µ–π—Å"))
async def handle_case(message: Message):
    user_state[message.from_user.id] = "–∫–µ–π—Å"
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –ø–æ —à–∞–±–ª–æ–Ω—É:\n‚Äî –ù–∏—à–∞\n‚Äî –ö–ª–∏–µ–Ω—Ç\n‚Äî –ó–∞–¥–∞—á–∞\n‚Äî –°–ª–æ–∂–Ω–æ—Å—Ç–∏\n‚Äî –ß—Ç–æ –¥–µ–ª–∞–ª–∏\n‚Äî –¶–∏—Ñ—Ä—ã\n‚Äî –≠–º–æ—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")

@dp.message(Command("–ø—Ä–æ–¥–∂–µ–∫—Ç"))
async def handle_project(message: Message):
    user_state[message.from_user.id] = "–ø—Ä–æ–¥–∂–µ–∫—Ç"
    await message.answer("–û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é —Å –∫–ª–∏–µ–Ω—Ç–æ–º ‚Äî —è –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –≥—Ä–∞–º–æ—Ç–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ Project-–º–µ–Ω–µ–¥–∂–µ—Ä.")

@dp.message(Command("—á–∞—Ç-–±–æ—Ç"))
async def handle_chatbot(message: Message):
    user_state[message.from_user.id] = "—á–∞—Ç-–±–æ—Ç"
    await message.answer("–£–∫–∞–∂–∏ –Ω–∏—à—É ‚Äî –∏ —è —Å–æ–∑–¥–∞–º –≤–æ—Ä–æ–Ω–∫—É –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.")

@dp.message(Command("—Ñ–∏–Ω–º–æ–¥–µ–ª—å"))
async def handle_finmodel(message: Message):
    user_state[message.from_user.id] = "—Ñ–∏–Ω–º–æ–¥–µ–ª—å"
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–Ω–º–æ–¥–µ–ª–∏: —á–µ–∫, —Ä–æ—Å—Ç, –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å—Ä–æ–∫–∏, —Ä–∞—Å—Ö–æ–¥—ã –∏ —Ç.–¥.")

@dp.message(Command("—Å–æ–∑–¥–∞–Ω–∏–µ–ö–ü"))
async def handle_offer(message: Message):
    user_state[message.from_user.id] = "—Å–æ–∑–¥–∞–Ω–∏–µ–ö–ü"
    await message.answer("–ù–∞–ø–∏—à–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —Å—Å—ã–ª–∫–∏ –∏ —Å–æ—Ü—Å–µ—Ç–∏ ‚Äî —è —Å–æ–±–µ—Ä—É –ö–ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–∞–π–¥–æ–≤.")

@dp.message()
async def handle_text(message: Message):
    user_id = message.from_user.id
    today = datetime.date.today()

    if user_id not in user_limits or user_limits[user_id]["date"] != today:
        user_limits[user_id] = {"count": 0, "date": today}

    if user_limits[user_id]["count"] >= MAX_REQUESTS_PER_DAY:
        await message.answer("‚õî –õ–∏–º–∏—Ç 20 GPT-–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞!")
        return

    context = user_state.get(user_id, None)
    prompt_user = message.text

    if context == "—É—Ç–ø":
        prompt = f"–¢—ã –æ–ø—ã—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤—å 10 –£–¢–ü –¥–ª—è –Ω–∏—à–∏: {prompt_user}"
    elif context == "—Ü–∞":
        prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¶–ê –¥–ª—è –Ω–∏—à–∏: {prompt_user} –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É /—Ü–∞ –∏ –≤—ã–¥–∞–π 3 –∞–≤–∞—Ç–∞—Ä–∞."
    elif context == "–∫–æ–Ω—Ç–µ–Ω—Ç":
        prompt = f"–°–æ–∑–¥–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü –¥–ª—è –Ω–∏—à–∏: {prompt_user}, –∫–∞–∫ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ /–∫–æ–Ω—Ç–µ–Ω—Ç"
    elif context == "—Å–∫—Ä–∏–ø—Ç":
        prompt = f"""
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª: "{prompt_user}"

1. –û–ø—Ä–µ–¥–µ–ª–∏, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –ø—Ä–æ–¥–∞–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–ª–∏–µ–Ω—Ç.
2. –û–±—ä—è—Å–Ω–∏, —á—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ.
3. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –∂–∏–≤–æ–π –∏ —á–µ–ª–æ–≤–µ—á–Ω—ã–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å –µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ.

–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω—ã. –ü–∏—à–∏, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ–¥–∞–≤–µ—Ü —Å–æ —Å—Ç–µ—Ä–∂–Ω–µ–º –∏ —ç–º–ø–∞—Ç–∏–µ–π.
"""
    elif context == "–∫–µ–π—Å":
        prompt = f"–°–æ–∑–¥–∞–π –∫–µ–π—Å –ø–æ —à–∞–±–ª–æ–Ω—É /–∫–µ–π—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö: {prompt_user}"
    elif context == "–ø—Ä–æ–¥–∂–µ–∫—Ç":
        prompt = f"–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: {prompt_user}. –û—Ç–≤–µ—Ç—å –∫–∞–∫ Project-–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É /–ø—Ä–æ–¥–∂–µ–∫—Ç."
    elif context == "—á–∞—Ç-–±–æ—Ç":
        prompt = f"–°–æ–∑–¥–∞–π —á–∞—Ç-–±–æ—Ç –≤–æ—Ä–æ–Ω–∫—É –ø–æ —à–∞–±–ª–æ–Ω—É /—á–∞—Ç-–±–æ—Ç –¥–ª—è –Ω–∏—à–∏: {prompt_user}"
    elif context == "—Ñ–∏–Ω–º–æ–¥–µ–ª—å":
        prompt = f"–ü–æ—Å—Ç—Ä–æ–π —Ñ–∏–Ω–º–æ–¥–µ–ª—å –ø–æ –¥–∞–Ω–Ω—ã–º: {prompt_user} –ø–æ —à–∞–±–ª–æ–Ω—É /—Ñ–∏–Ω–º–æ–¥–µ–ª—å"
    elif context == "—Å–æ–∑–¥–∞–Ω–∏–µ–ö–ü":
        prompt = f"–°–æ–±–µ—Ä–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–∞–π–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ: {prompt_user}"
    else:
        prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç: {prompt_user}. –û—Ç–≤–µ—Ç—å –∫–∞–∫ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç–∞—Ä–≥–µ—Ç–æ–ª–æ–≥–∞."

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.6,
            max_tokens=500,
            top_p=0.9,
            frequency_penalty=0.2,
            presence_penalty=0.1
        )
        answer = response.choices[0].message.content
        await message.answer(answer)
        user_limits[user_id]["count"] += 1
        user_state[user_id] = None

    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT:\n" + str(e))

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
