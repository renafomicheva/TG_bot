
import asyncio
import os
import datetime
import subprocess
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
import openai

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN or not OPENAI_KEY:
    raise ValueError("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY")

openai.api_key = OPENAI_KEY
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

MAX_REQUESTS_PER_DAY = 20
user_limits = {}
user_state = {}

menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/—É—Ç–ø")],
        [KeyboardButton(text="/—Ü–∞")],
        [KeyboardButton(text="/–∫–æ–Ω—Ç–µ–Ω—Ç")],
        [KeyboardButton(text="/—Å–∫—Ä–∏–ø—Ç–ø—Ä–æ–¥–∞–∂")],
        [KeyboardButton(text="/–∫–µ–π—Å")],
        [KeyboardButton(text="/–ø—Ä–æ–¥–∂–µ–∫—Ç")],
        [KeyboardButton(text="/—á–∞—Ç-–±–æ—Ç")],
        [KeyboardButton(text="/—Ñ–∏–Ω–º–æ–¥–µ–ª—å")],
        [KeyboardButton(text="/—Å–æ–∑–¥–∞–Ω–∏–µ–ö–ü")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ —Ç–∞—Ä–≥–µ—Ç–æ–ª–æ–≥–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã–π @renafomicheva\n"
        "–ù–∞–ø–∏—à–∏ /–º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å üî•\n\n"
        "üìå –ù–µ –±–æ–ª–µ–µ 20 GPT-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        reply_markup=menu_keyboard
    )

@dp.message(lambda message: message.voice or message.audio or message.document)
async def handle_voice_audio(message: Message):
    if message.voice:
        file_id = message.voice.file_id
        ogg_file = f"voice_{message.from_user.id}.ogg"
        mp3_file = f"voice_{message.from_user.id}.mp3"
    elif message.audio:
        file_id = message.audio.file_id
        ogg_file = f"audio_{message.from_user.id}.ogg"
        mp3_file = f"audio_{message.from_user.id}.mp3"
    elif message.document:
        file_id = message.document.file_id
        ogg_file = f"doc_{message.from_user.id}.ogg"
        mp3_file = f"doc_{message.from_user.id}.mp3"
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    file = await bot.get_file(file_id)
    await bot.download_file(file.file_path, ogg_file)
    subprocess.run(["ffmpeg", "-y", "-i", ogg_file, mp3_file], capture_output=True)

    with open(mp3_file, "rb") as audio_file:
        transcript = openai.Audio.transcribe("whisper-1", audio_file)

    await message.answer(f"üéß –í—ã —Å–∫–∞–∑–∞–ª–∏: {transcript['text']}")
    await process_input(message, transcript["text"])

async def process_input(message: Message, text: str):
    user_id = message.from_user.id
    today = datetime.date.today()
    if user_id not in user_limits or user_limits[user_id]["date"] != today:
        user_limits[user_id] = {"date": today, "count": 0}
    if user_limits[user_id]["count"] >= MAX_REQUESTS_PER_DAY:
        await message.answer("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return

    user_limits[user_id]["count"] += 1
    current_command = user_state.get(user_id)

    if not current_command:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ /–º–µ–Ω—é, –∞ –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")
        return

    system_prompt = {
        "/—É—Ç–ø": "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –∏ –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–µ–Ω–µ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∏—à—É –∏ —Å–æ—Å—Ç–∞–≤—å 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –£–¢–ü –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É.",
        "/—Ü–∞": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é, –µ—ë –±–æ–ª–∏, —Å—Ç—Ä–∞—Ö–∏, –∂–µ–ª–∞–Ω–∏—è, —Å–µ–≥–º–µ–Ω—Ç—ã –∏ –≤—ã–¥–∞–π 3 –∞–≤–∞—Ç–∞—Ä–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.",
        "/–∫–æ–Ω—Ç–µ–Ω—Ç": "–°–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑, –£–¢–ü –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–∏—à–∏, 15 –ø–æ—Å—Ç–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º.",
        "/—Å–∫—Ä–∏–ø—Ç–ø—Ä–æ–¥–∞–∂": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –û–ø—Ä–µ–¥–µ–ª–∏ —ç—Ç–∞–ø —Å–¥–µ–ª–∫–∏ –∏ —Å–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å –µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ.",
        "/–∫–µ–π—Å": "–°–æ—Å—Ç–∞–≤—å –∫–µ–π—Å –ø–æ —Ä–µ–∫–ª–∞–º–µ: –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å —á–µ–º –ø—Ä–∏—à—ë–ª –∫–ª–∏–µ–Ω—Ç, —á—Ç–æ —Å–¥–µ–ª–∞–ª–∏, —Ü–∏—Ñ—Ä—ã, –ø—Ä–∏—á–∏–Ω—ã —É—Å–ø–µ—Ö–∞, –≤—ã–≤–æ–¥ –∏ –ø—Ä–∏–∑—ã–≤.",
        "/–ø—Ä–æ–¥–∂–µ–∫—Ç": "–¢—ã ‚Äî –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä. –†–∞–∑–±–µ—Ä–∏ —ç–º–æ—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ —Ç–æ–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞.",
        "/—á–∞—Ç-–±–æ—Ç": "–°–æ–∑–¥–∞–π –ø—Ä–æ–≥—Ä–µ–≤–∞—é—â—É—é –≤–æ—Ä–æ–Ω–∫—É –≤ —á–∞—Ç-–±–æ—Ç–µ —Å —ç—Ç–∞–ø–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –ø–æ–¥ —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–∏—à—É.",
        "/—Ñ–∏–Ω–º–æ–¥–µ–ª—å": "–†–∞—Å—Å—á–∏—Ç–∞–π —Ñ–∏–Ω–º–æ–¥–µ–ª—å –∏ —Ä–æ—Å—Ç –±–∏–∑–Ω–µ—Å–∞, –∑–∞–ø—Ä–æ—Å–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, —Å–¥–µ–ª–∞–π –≤—ã–≤–æ–¥—ã.",
        "/—Å–æ–∑–¥–∞–Ω–∏–µ–ö–ü": "–°–¥–µ–ª–∞–π –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –≤—ã–≥–æ–¥—ã, –æ—Ñ—Ñ–µ—Ä—ã, —Ç–æ–Ω –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ."
    }.get(current_command)

    if system_prompt:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": text}
            ],
            temperature=0.7
        )
        await message.answer(response.choices[0].message.content)
        user_state[user_id] = None  # –æ—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")

@dp.message(Command("–º–µ–Ω—é"))
async def show_menu(message: Message):
    await cmd_start(message)

@dp.message(Command("—É—Ç–ø", "—Ü–∞", "–∫–æ–Ω—Ç–µ–Ω—Ç", "—Å–∫—Ä–∏–ø—Ç–ø—Ä–æ–¥–∞–∂", "–∫–µ–π—Å", "–ø—Ä–æ–¥–∂–µ–∫—Ç", "—á–∞—Ç-–±–æ—Ç", "—Ñ–∏–Ω–º–æ–¥–µ–ª—å", "—Å–æ–∑–¥–∞–Ω–∏–µ–ö–ü"))
async def set_mode(message: Message):
    user_state[message.from_user.id] = message.text
    await message.answer("–ì–æ—Ç–æ–≤–æ! –ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–∞–¥–∞—á—É, —Å –∫–æ—Ç–æ—Ä–æ–π –º–Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å üìù")

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
